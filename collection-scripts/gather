#!/bin/bash
# shellcheck disable=SC2154,SC1091,SC2086
source common.sh

# for new flag to get since and since-time
get_log_collection_args

# define default namespaces
OPERATOR_NS=${OPERATOR_NAMESPACE:-redhat-ods-operator}
NOTEBOOKS_NS=${NOTEBOOK_NAMESPACE:-rhods-notebooks}
MONITORING_NS=${MONITORING_NAMESPACE:-redhat-ods-monitoring}
APPLICATIONS_NS=${APPLICATIONS_NAMESPACE:-redhat-ods-applications}
MODELREG_NS=${MODEL_REGISTRIES_NAMESPACE:-rhoai-model-registries}
# dependent operator namespace
OSSM_NS=${OSSM_NS:-istio-system}
KNATIVE_NS=${KNATIVE_NS:-knative-serving}
AUTH_NS=${AUTH_NS:-redhat-ods-applications-auth-provider}


# generate /must-gather/version file with RHOAI version
echo "red-hat-data-services/must-gather" > "$DST_DIR/version"
rhoai_version >> "$DST_DIR/version"

oc adm inspect $log_collection_args "namespace/$OPERATOR_NS" --dest-dir="$DST_DIR" || echo "Error getting logs from ${OPERATOR_NS}"
oc adm inspect $log_collection_args "namespace/$MONITORING_NS" --dest-dir="$DST_DIR"  || echo "Error getting logs from ${MONITORING_NS}"
oc adm inspect $log_collection_args "namespace/$APPLICATIONS_NS" --dest-dir="$DST_DIR"  || echo "Error getting logs from ${APPLICATIONS_NS}"
oc adm inspect $log_collection_args "namespace/$NOTEBOOKS_NS" --dest-dir="$DST_DIR" || echo "Error getting logs from ${NOTEBOOKS_NS}"
oc adm inspect $log_collection_args "namespace/$MODELREG_NS" --dest-dir="$DST_DIR"  || echo "Error getting logs from ${MODELREG_NS}"
oc adm inspect $log_collection_args "namespace/$OSSM_NS" --dest-dir="$DST_DIR"  || echo "Error getting logs from ${OSSM_NS}"
oc adm inspect $log_collection_args "namespace/$KNATIVE_NS" --dest-dir="$DST_DIR"  || echo "Error getting logs from ${KNATIVE_NS}"
oc adm inspect $log_collection_args "namespace/$AUTH_NS" --dest-dir="$DST_DIR"  || echo "Error getting logs from ${AUTH_NS}"


# add DSCI, DSC, Auth and new component CRs
resources=("dscinitialization" "datasciencecluster" "auths" "monitorings" "codeflares" "dashboards" "datasciencepipelines" "feastoperator" "kserves" "kueues" "modelcontrollers" "modelmeshservings" "modelregistries" "rays" "trainingoperators" "trustyais" "workbenches")
get_operator_resource "${resources[@]}"


# set component or default to all
component=${COMPONENT:-all}
case "$component" in
    "dsp")
        /usr/bin/gather_data_science_pipelines
        ;;
    "modelmesh")
        /usr/bin/gather_serving
        ;;
    "kserve")
        /usr/bin/gather_serving
        ;;
    "dashboard")
        /usr/bin/gather_dashboard
        ;;
    "workbench")
        /usr/bin/gather_notebooks
        ;;
    "kuberay")
        /usr/bin/gather_kuberay
        ;;
    "kueue")
        /usr/bin/gather_kueue
        ;;
    "kfto")
        /usr/bin/gather_kfto
        ;;
    "cfo")
        /usr/bin/gather_cfo
        ;;
    "modelregistry")
        /usr/bin/gather_mr
        ;;
    "trustyai")
        /usr/bin/gather_trustyai
        ;;
    "feastoperator")
        /usr/bin/gather_feastoperator
        ;;
    *) # for all 
        /usr/bin/gather_data_science_pipelines
        /usr/bin/gather_serving
        /usr/bin/gather_notebooks
        /usr/bin/gather_kuberay
        /usr/bin/gather_kueue
        /usr/bin/gather_kfto
        /usr/bin/gather_cfo
        /usr/bin/gather_mr
        /usr/bin/gather_trustyai
        /usr/bin/gather_feastoperator
        ;;
esac

# force disk flush to ensure that all data gathered is accessible in the copy container
sync
